-- Enable UUID extension
DROP EXTENSION IF EXISTS "uuid-ossp";
CREATE EXTENSION "uuid-ossp";

-- Enums
DROP TYPE IF EXISTS delivery_status_enum;
CREATE TYPE delivery_status_enum AS ENUM ('Pending', 'InTransit', 'Delivered');

DROP TYPE IF EXISTS order_status_enum;
CREATE TYPE order_status_enum AS ENUM ('Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled');

DROP TYPE IF EXISTS visibility_enum;
CREATE TYPE visibility_enum AS ENUM ('Public', 'Private');
CREATE TYPE custumer_type_enum AS ENUM ('Regular', 'Premium');

CREATE TYPE address_type_enum AS ENUM ('DeliveryPoint', 'Other');

CREATE TYPE question_status_enum AS ENUM ('Pending', 'Answered');

CREATE TYPE logistic_type_enum AS ENUM ('MOSA_JET', 'OTHER')

CREATE TYPE return_status_enum AS ENUM ('PENDING', 'APPROVED', 'REJECTED', 'RETURNED')
-- USER Table
DROP TABLE IF EXISTS "USER" CASCADE;
CREATE TABLE "USER" (
    UserID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    PhoneNumber VARCHAR(15) UNIQUE NOT NULL,
    HashedPassword VARCHAR(255) NOT NULL,
    Email VARCHAR(150) UNIQUE NOT NULL,
    MembershipDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_email_format CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- CUSTOMER Table
DROP TABLE IF EXISTS CUSTOMER CASCADE;
CREATE TABLE CUSTOMER (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    CustomerType custumer_type_enum NOT NULL 
);

-- PREMIUM Table
DROP TABLE IF EXISTS PREMIUM CASCADE;
CREATE TABLE PREMIUM (
    UserID UUID PRIMARY KEY REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    PremiumStartDate TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PremiumEndDate TIMESTAMP NOT NULL,
    MembershipPlan VARCHAR(100) NOT NULL,
    CONSTRAINT chk_premium_dates CHECK (PremiumStartDate < PremiumEndDate)
);

-- PAYMENT_METHOD Table
DROP TABLE IF EXISTS PAYMENT_METHOD CASCADE;
CREATE TABLE PAYMENT_METHOD (
    PaymentID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    InstallmentCount INT CHECK (InstallmentCount >= 0),
    InstallmentAmmount FLOAT CHECK (InstallmentAmmount >= 0),
    InstallmentRate FLOAT CHECK (InstallmentRate >= 0),
    CreatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE
)

-- BANK_CARD Table
DROP TABLE IF EXISTS BANK_CARD CASCADE;
CREATE TABLE BANK_CARD (
    PaymentID UUID PRIMARY KEY REFERENCES PAYMENT_METHOD(PaymentID) ON DELETE CASCADE,
    CardLastFourDigits  VARCHAR(4) NOT NULL, -- security reasons

    ExpiryDate DATE NOT NULL,
    CVV VARCHAR(3) NOT NULL,
    CardHolderName VARCHAR(100) NOT NULL,
    PaymentType VARCHAR(50) NOT NULL    
);

-- WALLET Table
DROP TABLE IF EXISTS WALLET CASCADE;
CREATE TABLE WALLET (
    PaymentID UUID PRIMARY KEY REFERENCES PAYMENT_METHOD(PaymentID) ON DELETE CASCADE,
    Balance FLOAT CHECK (Balance >= 0),
    ExpireDate TIMESTAMP NOT NULL, -- ADD FUNCTION
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE
);
-- ADMIN Table
DROP TABLE IF EXISTS ADMIN CASCADE;
CREATE TABLE ADMIN (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    Role VARCHAR(50) NOT NULL,
    LastLogin TIMESTAMP
);

-- ADDRESS Table
DROP TABLE IF EXISTS ADDRESS CASCADE;
CREATE TABLE ADDRESS (
    AddressID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ZipCode VARCHAR(10),
    Neighbourhood VARCHAR(100),
    Province VARCHAR(100),
    City VARCHAR(100),
    Country VARCHAR(100),
    Flat VARCHAR(50),
    Apartment VARCHAR(50),
    AddressType address_type_enum ,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE
    RegistrationNumber UUID REFERENCES SHOP(RegistrationNumber) ON DELETE CASCADE
);

-- SHOP Table
DROP TABLE IF EXISTS SHOP CASCADE;
CREATE TABLE SHOP (
    RegistrationNumber UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- ADD UNIQUE FORMAT FOR REGISTRATION NUMBER
    ShopDescription TEXT,
    ShopRate FLOAT CHECK (ShopRate BETWEEN 0 AND 5), -- ADD RATE FUNCTION
    ShopName VARCHAR(150) NOT NULL UNIQUE,
    CreationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ShopPhone VARCHAR(15),
    -- add tsvector column for full text search
);

-- SELLER Table
DROP TABLE IF EXISTS SELLER CASCADE;
CREATE TABLE SELLER (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    ShopID UUID REFERENCES SHOP(RegistrationNumber) ON DELETE SET NULL,
    SellerRate FLOAT CHECK (SellerRate BETWEEN 0 AND 5)  -- ADD RATE FUNCTION
);


-- PRODUCT Table
DROP TABLE IF EXISTS PRODUCT CASCADE;
CREATE TABLE PRODUCT (
    ProductID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ProductName VARCHAR(150) NOT NULL,
    Brand VARCHAR(100),
    SKU VARCHAR(100) UNIQUE NOT NULL,
    ShortDescription VARCHAR(255),
    Description TEXT,
    IsApproved BOOLEAN DEFAULT FALSE,
    Status VARCHAR(50),
    Rating FLOAT CHECK (Rating BETWEEN 0 AND 5),
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TaxClass VARCHAR(50),
    BarCode VARCHAR(50),
    BasePrice FLOAT NOT NULL CHECK (BasePrice >= 0)
);

-- PRODUCT_OPTION Table
DROP TABLE IF EXISTS PRODUCT_OPTION CASCADE;
CREATE TABLE PRODUCT_OPTION (
    OptionID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    OptionName VARCHAR(100),
    IsMandatory BOOLEAN DEFAULT FALSE
);


-- OPTION_VALUE Table
DROP TABLE IF EXISTS OPTION_VALUE CASCADE;
CREATE TABLE OPTION_VALUE (
    OptionValueID UUID DEFAULT uuid_generate_v4(),
    OptionID UUID REFERENCES PRODUCT_OPTION(OptionID) ON DELETE CASCADE,
    DimensionImpact FLOAT,
    WeightImpact FLOAT,
    AdditionalPrice FLOAT CHECK (AdditionalPrice >= 0),
    PRIMARY KEY (OptionValueID, OptionID)
    
);

-- HAS OPTION
DROP TABLE IF EXISTS PRODUCT_HAS_OPTION CASCADE;

CREATE TABLE PRODUCT_HAS_OPTION (
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    OptionID UUID REFERENCES PRODUCT_OPTION(OptionID) ON DELETE CASCADE,
    PRIMARY KEY (ProductID, OptionID)
);

-- PRODUCT_VARIATION Table
DROP TABLE IF EXISTS PRODUCT_VARIATION CASCADE;
CREATE TABLE PRODUCT_VARIATION (
    VariationID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    Status VARCHAR(50),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    StockLevel INT CHECK (StockLevel >= 0),
    Weight FLOAT CHECK (Weight >= 0),
    OptionCombination VARCHAR(255),
    Price FLOAT CHECK (Price >= 0)
);

-- COMBINATION Table
DROP TABLE IF EXISTS COMBINATION CASCADE;
CREATE TABLE COMBINATION (
    VariationID UUID REFERENCES PRODUCT_VARIATION(VariationID) ON DELETE CASCADE,
    OptionValueID UUID REFERENCES OPTION_VALUE(OptionValueID) ON DELETE CASCADE,
    PRIMARY KEY (VariationID, OptionValueID)
);

-- CATEGORY Table
DROP TABLE IF EXISTS CATEGORY CASCADE;
CREATE TABLE CATEGORY (
    CategoryID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    CategoryName VARCHAR(100),
    MediaID UUID
);

-- PRODUCT_CATEGORY Table
DROP TABLE IF EXISTS PRODUCT_CATEGORY CASCADE;
CREATE TABLE PRODUCT_CATEGORY (
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    CategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    PRIMARY KEY (ProductID, CategoryID)
);

-- SUBCATEGORY Table
DROP TABLE IF EXISTS SUBCATEGORY CASCADE;
CREATE TABLE SUBCATEGORY (
    ParentCategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    ChildCategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    PRIMARY KEY (ParentCategoryID, ChildCategoryID)
);

-- SHOP_SELLS_PRODUCT Table
DROP TABLE IF EXISTS SHOP_SELLS_PRODUCT CASCADE;
CREATE TABLE SHOP_SELLS_PRODUCT (
    RegistrationNumber UUID REFERENCES SHOP(RegistrationNumber) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
);
-- LIST Table
DROP TABLE IF EXISTS LIST CASCADE;
CREATE TABLE LIST (
    ListID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    ListName VARCHAR(100),
    ListType VARCHAR(50),
    Visibility visibility_enum NOT NULL
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- LIKE table
DROP TABLE IF EXISTS LIKE_PRODUCT  CASCADE;
CREATE LIKE_PRODUCT  (
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    PRIMARY KEY (UserID, ProductID)
);

-- LIST_CONTAINS Table
DROP TABLE IF EXISTS LIST_CONTAINS CASCADE;
CREATE TABLE LIST_CONTAINS (
    ListID UUID REFERENCES LIST(ListID) ON DELETE CASCADE,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    PRIMARY KEY (ListID, UserID, ProductID)
);

-- CART Table
DROP TABLE IF EXISTS CART CASCADE;
CREATE TABLE CART (
    CartID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    CartStatus VARCHAR(50),
    CreateDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdateDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice FLOAT CHECK (TotalPrice >= 0)
);

-- CART_ITEM Table
DROP TABLE IF EXISTS CART_ITEM CASCADE;
CREATE TABLE CART_ITEM (
    CartItemID UUID  DEFAULT uuid_generate_v4(),
    CartID UUID REFERENCES CART(CartID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    DiscountID UUID REFERENCES DISCOUNT(DiscountID) ON DELETE SET NULL,
    Quantity INT CHECK (Quantity > 0),
    FinalPrice FLOAT CHECK (FinalPrice >= 0)
    PRIMARY KEY (CartItemID, ProductID, UserID)
);

-- ORDER Table

DROP TABLE IF EXISTS "ORDER" CASCADE;
CREATE TABLE "ORDER" (
    OrderNo UUID DEFAULT uuid_generate_v4(),
    DateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice FLOAT CHECK (TotalPrice >= 0),
    UserID UUID REFERENCES CART_ITEM(UserID) ON DELETE CASCADE,
    ProductID UUID REFERENCES CART_ITEM(ProductID) ON DELETE CASCADE,
    PaymentID UUID REFERENCES PAYMENT_METHOD(PaymentID) ON DELETE CASCADE,
    -- APPLIED DISCOUNT

    PRIMARY KEY (OrderNo, UserID, ProductID)
);

-- ORDER_ITEM Table
DROP TABLE IF EXISTS ORDER_ITEM CASCADE;
CREATE TABLE ORDER_ITEM (
    OrderItemID UUID DEFAULT uuid_generate_v4(),
    OrderNo UUID REFERENCES "ORDER"(OrderNo) ON DELETE CASCADE,
    UserId UUID REFERENCES "ORDER"(UserID) ON DELETE CASCADE,
    ProductID UUID REFERENCES  "ORDER"(ProductID) ON DELETE CASCADE,
    PaymentID UUID REFERENCES "ORDER"(PaymentID) ON DELETE CASCADE,
    LogisticID UUID REFERENCES LOGISTIC(LogisticID) ON DELETE SET NULL,
    Price FLOAT CHECK (Price >= 0),
    OrderStatus order_status_enum NOT NULL
    PRIMARY KEY (OrderItemID, OrderNo, UserId, ProductID, PaymentID)
);

-- REVIEW Table
DROP TABLE IF EXISTS REVIEW CASCADE;
CREATE TABLE REVIEW (
    ReviewID UUID DEFAULT uuid_generate_v4(),
    ProductID UUID REFERENCES ORDER_ITEM(ProductID) ON DELETE CASCADE,
    OrderItemID UUID REFERENCES ORDE_ITEM(OrderItemID) ON DELETE CASCADE,
    UserID UUID REFERENCES ORDER_ITEM(UserID) ON DELETE CASCADE,
    OrderNo UUID REFERENCES ORDER_ITEM(OrderNo) ON DELETE CASCADE,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    Comment TEXT,
    ReviewDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ResponseDate TIMESTAMP,
    Response TEXT,
    RegistrationNumber UUID REFERENCES SHOP(RegistrationNumber) ON DELETE SET NULL,
    PRIMARY KEY (ReviewID, ProductID, OrderItemID, UserID, OrderNo),
);

-- LOGISTIC Table
DROP TABLE IF EXISTS LOGISTIC CASCADE;
CREATE TABLE LOGISTIC (
    LogisticID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    TrackingNumber VARCHAR(100),
    DeliveryStatus delivery_status_enum NOT NULL,
    ShippingDate TIMESTAMP,
    DeliveryDate TIMESTAMP,
    LogisticType VARCHAR(50),
    Recipent VARCHAR(100),
    LPrice FLOAT CHECK (LPrice >= 0), -- FUNCTION
    LogisticType logistic_type_enum NOT NULL
    AddressID UUID REFERENCES ADDRESS(AddressID) ON DELETE SET NULL
);

-- DISCOUNT Table
DROP TABLE IF EXISTS DISCOUNT CASCADE;
CREATE TABLE DISCOUNT (
    DiscountID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    Rate FLOAT CHECK (Rate >= 0 AND Rate <= 100),
    DiscountLimit INT CHECK (DiscountLimit >= 0),
    Status BOOLEAN NOT NULL,
    CouponFlag BOOLEAN DEFAULT FALSE,
    PercentageFlag BOOLEAN DEFAULT FALSE,
    FixedAmountFlag BOOLEAN DEFAULT FALSE,
    PrimeDiscount BOOLEAN DEFAULT FALSE
);

-- DICOUNT_APPLIED_PRODUCT

DROP TABLE IF EXISTS DISCOUNT_APPLIED_PRODUCT
CREATE TABLE DISCOUNT_APPLIED_PRODUCT (
    DiscountID UUID REFERENCES DISCOUNT(DiscountID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    PRIMARY KEY (DiscountID, ProductID)
);


-- QUESTION Table
DROP TABLE IF EXISTS QUESTION CASCADE;

CREATE TABLE QUESTION (
    QuestionNumber UUID  DEFAULT uuid_generate_v4(),
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    CustomerID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    SellerID UUID REFERENCES SELLER(UserID) ON DELETE CASCADE,
    QuestionText TEXT NOT NULL,
    AnswerText TEXT,
    QuestionStatus question_status_enum NOT NULL,
    QuestionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    AnswerDate TIMESTAMP, 
    PRIMARY KEY (QuestionNumber, ProductID, )
);

-- RETURN
DROP TABLE IF EXISTS RETUEN;

CREATE TABLE RETURN (
    TrackingNO UUID DEFAULT uuid_generate-v4(),
    OrderItemID UUID ORDER_ITEM(OrderItemID) ON DELETE CASCADE,
    ProductID UUID ORDER_ITEM(ProductID) ON DELETE CASCADE,
    PaymentID UUID ORDER_ITEM(PaymentID) ON DELETE CASCADE,
    UserID UUID ORDER_ITEM(UserID) ON DELETE CASCADE,
    ReturnDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ReturnStatus return_status_enum NOT NULL,
    ReturnReason TEXT NOT NULL,

);

-- SKU_MANAGMENT
DROP TABLE IF EXISTS SKU_MANAGMENT;
CREATE TABLE SKU_MANAGMENT (
    SKU VARCHAR(12) PRIMARY KEY,
    SupplierName VARCHAR(255) NOT NULL,
    RestoackDate TIMESTAMP NOT NULL,
    StockLevel INT NOT NULL,
    RestockThreshold INT NOT NULL,
    VariationID UUID REFERENCES VARIATION(VariationID) ON DELETE CASCADE,
)