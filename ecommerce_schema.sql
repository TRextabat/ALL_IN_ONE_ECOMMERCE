-- Enable UUID extension
DROP EXTENSION IF EXISTS "uuid-ossp";
CREATE EXTENSION "uuid-ossp";

-- Enums
DROP TYPE IF EXISTS delivery_status_enum;
CREATE TYPE delivery_status_enum AS ENUM ('Pending', 'InTransit', 'Delivered');

DROP TYPE IF EXISTS order_status_enum;
CREATE TYPE order_status_enum AS ENUM ('Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled');

DROP TYPE IF EXISTS visibility_enum;
CREATE TYPE visibility_enum AS ENUM ('Public', 'Private');

-- USER Table
DROP TABLE IF EXISTS "USER" CASCADE;
CREATE TABLE "USER" (
    UserID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    PhoneNumber VARCHAR(15),
    HashedPassword VARCHAR(255) NOT NULL,
    Email VARCHAR(150) UNIQUE NOT NULL,
    MembershipDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_email_format CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- CUSTOMER Table
DROP TABLE IF EXISTS CUSTOMER CASCADE;
CREATE TABLE CUSTOMER (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    CustomerType VARCHAR(50) NOT NULL
);

-- PREMIUM Table
DROP TABLE IF EXISTS PREMIUM CASCADE;
CREATE TABLE PREMIUM (
    UserID UUID PRIMARY KEY REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    PremiumStartDate TIMESTAMP NOT NULL,
    PremiumEndDate TIMESTAMP NOT NULL,
    MembershipPlan VARCHAR(100) NOT NULL,
    CONSTRAINT chk_premium_dates CHECK (PremiumStartDate < PremiumEndDate)
);

-- ADMIN Table
DROP TABLE IF EXISTS ADMIN CASCADE;
CREATE TABLE ADMIN (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    Role VARCHAR(50) NOT NULL,
    LastLogin TIMESTAMP
);

-- ADDRESS Table
DROP TABLE IF EXISTS ADDRESS CASCADE;
CREATE TABLE ADDRESS (
    AddressID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ZipCode VARCHAR(10),
    Neighbourhood VARCHAR(100),
    Province VARCHAR(100),
    City VARCHAR(100),
    Country VARCHAR(100),
    Flat VARCHAR(50),
    Apartment VARCHAR(50),
    AddressType VARCHAR(50),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE
);

-- SHOP Table
DROP TABLE IF EXISTS SHOP CASCADE;
CREATE TABLE SHOP (
    RegistrationNumber UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ShopDescription TEXT,
    ShopRate FLOAT CHECK (ShopRate BETWEEN 0 AND 5),
    ShopName VARCHAR(150) NOT NULL UNIQUE,
    CreationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ShopPhone VARCHAR(15),
    BusinessType VARCHAR(100),
    AddressID UUID REFERENCES ADDRESS(AddressID) ON DELETE SET NULL
);

-- SELLER Table
DROP TABLE IF EXISTS SELLER CASCADE;
CREATE TABLE SELLER (
    UserID UUID PRIMARY KEY REFERENCES "USER"(UserID) ON DELETE CASCADE,
    ShopID UUID REFERENCES SHOP(RegistrationNumber) ON DELETE SET NULL,
    SellerRate FLOAT CHECK (SellerRate BETWEEN 0 AND 5)
);

-- PRODUCT Table
DROP TABLE IF EXISTS PRODUCT CASCADE;
CREATE TABLE PRODUCT (
    ProductID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ProductName VARCHAR(150) NOT NULL,
    Brand VARCHAR(100),
    SKU VARCHAR(100) UNIQUE,
    ShortDescription VARCHAR(255),
    Description TEXT,
    IsApproved BOOLEAN DEFAULT FALSE,
    Status VARCHAR(50),
    Rating FLOAT CHECK (Rating BETWEEN 0 AND 5),
    DateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TaxClass VARCHAR(50),
    BarCode VARCHAR(50),
    BasePrice FLOAT NOT NULL CHECK (BasePrice >= 0)
);

-- PRODUCT_OPTION Table
DROP TABLE IF EXISTS PRODUCT_OPTION CASCADE;
CREATE TABLE PRODUCT_OPTION (
    OptionID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    OptionName VARCHAR(100),
    IsMandatory BOOLEAN DEFAULT FALSE
);

-- OPTION_VALUE Table
DROP TABLE IF EXISTS OPTION_VALUE CASCADE;
CREATE TABLE OPTION_VALUE (
    OptionValueID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    DimensionImpact FLOAT,
    WeightImpact FLOAT,
    AdditionalPrice FLOAT CHECK (AdditionalPrice >= 0)
);

-- PRODUCT_VARIATION Table
DROP TABLE IF EXISTS PRODUCT_VARIATION CASCADE;
CREATE TABLE PRODUCT_VARIATION (
    VariationID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    Status VARCHAR(50),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    StockLevel INT CHECK (StockLevel >= 0),
    Weight FLOAT CHECK (Weight >= 0),
    OptionCombination VARCHAR(255),
    Price FLOAT CHECK (Price >= 0)
);

-- COMBINATION Table
DROP TABLE IF EXISTS COMBINATION CASCADE;
CREATE TABLE COMBINATION (
    VariationID UUID REFERENCES PRODUCT_VARIATION(VariationID) ON DELETE CASCADE,
    OptionValueID UUID REFERENCES OPTION_VALUE(OptionValueID) ON DELETE CASCADE,
    PRIMARY KEY (VariationID, OptionValueID)
);

-- CATEGORY Table
DROP TABLE IF EXISTS CATEGORY CASCADE;
CREATE TABLE CATEGORY (
    CategoryID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    CategoryName VARCHAR(100),
    MediaID UUID
);

-- PRODUCT_CATEGORY Table
DROP TABLE IF EXISTS PRODUCT_CATEGORY CASCADE;
CREATE TABLE PRODUCT_CATEGORY (
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    CategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    PRIMARY KEY (ProductID, CategoryID)
);

-- SUBCATEGORY Table
DROP TABLE IF EXISTS SUBCATEGORY CASCADE;
CREATE TABLE SUBCATEGORY (
    ParentCategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    ChildCategoryID UUID REFERENCES CATEGORY(CategoryID) ON DELETE CASCADE,
    PRIMARY KEY (ParentCategoryID, ChildCategoryID)
);

-- LIST Table
DROP TABLE IF EXISTS LIST CASCADE;
CREATE TABLE LIST (
    ListID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    ListName VARCHAR(100),
    ListType VARCHAR(50),
    Visibility visibility_enum NOT NULL
);

-- LIST_ITEM Table
DROP TABLE IF EXISTS LIST_ITEM CASCADE;
CREATE TABLE LIST_ITEM (
    ListID UUID REFERENCES LIST(ListID) ON DELETE CASCADE,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    PRIMARY KEY (ListID, UserID, ProductID)
);

-- ORDER Table
DROP TABLE IF EXISTS "ORDER" CASCADE;
CREATE TABLE "ORDER" (
    OrderNo UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    DateTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice FLOAT CHECK (TotalPrice >= 0),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    PaymentID UUID
);

-- ORDER_ITEM Table
DROP TABLE IF EXISTS ORDER_ITEM CASCADE;
CREATE TABLE ORDER_ITEM (
    OrderItemID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    OrderID UUID REFERENCES "ORDER"(OrderNo) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    Price FLOAT CHECK (Price >= 0),
    OrderStatus order_status_enum NOT NULL
);

-- REVIEW Table
DROP TABLE IF EXISTS REVIEW CASCADE;
CREATE TABLE REVIEW (
    ReviewID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    Comment TEXT,
    ReviewDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- LOGISTIC Table
DROP TABLE IF EXISTS LOGISTIC CASCADE;
CREATE TABLE LOGISTIC (
    LogisticID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    TrackingNumber VARCHAR(100),
    DeliveryStatus delivery_status_enum NOT NULL,
    ShippingDate TIMESTAMP,
    DeliveryDate TIMESTAMP,
    LogisticType VARCHAR(50),
    AddressID UUID REFERENCES ADDRESS(AddressID) ON DELETE SET NULL
);

-- DISCOUNT Table
DROP TABLE IF EXISTS DISCOUNT CASCADE;
CREATE TABLE DISCOUNT (
    DiscountID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    Rate FLOAT CHECK (Rate >= 0 AND Rate <= 100),
    DiscountLimit INT CHECK (DiscountLimit >= 0),
    Status BOOLEAN NOT NULL,
    CouponFlag BOOLEAN DEFAULT FALSE,
    PercentageFlag BOOLEAN DEFAULT FALSE,
    FixedAmountFlag BOOLEAN DEFAULT FALSE,
    PrimeDiscount BOOLEAN DEFAULT FALSE
);

-- CART Table
DROP TABLE IF EXISTS CART CASCADE;
CREATE TABLE CART (
    CartID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    UserID UUID REFERENCES CUSTOMER(UserID) ON DELETE CASCADE,
    CartStatus VARCHAR(50),
    CreateDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdateDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TotalPrice FLOAT CHECK (TotalPrice >= 0)
);

-- CART_ITEM Table
DROP TABLE IF EXISTS CART_ITEM CASCADE;
CREATE TABLE CART_ITEM (
    CartItemID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    CartID UUID REFERENCES CART(CartID) ON DELETE CASCADE,
    ProductID UUID REFERENCES PRODUCT(ProductID) ON DELETE CASCADE,
    Quantity INT CHECK (Quantity > 0),
    FinalPrice FLOAT CHECK (FinalPrice >= 0)
);
